package com.inventory.serviceImpl;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.inventory.model.Inventory;
import com.inventory.repository.InventoryRepository;
import com.inventory.service.InventoryService;
import com.inventory.service.ProductClient;
@Service
public class InventoryServiceImpl implements InventoryService{
	
	@Autowired
	private InventoryRepository inventoryrepository;

	@Autowired
	private ProductClient productClient;

	@Override
	public List<Inventory> getAllInventories() {
		List<Inventory> inventories=inventoryrepository.findAll();
		System.out.println(inventories);
		List<Inventory> newInventoryList = inventories.stream().map(invt -> {
			invt.setProducts(productClient.getProductsByInventoryId(invt.getInventoryId()));
			return invt;
		}).collect(Collectors.toList());
		return newInventoryList;
	}

	@Override
	public Inventory getInventoryById(Long id) {
		Inventory inventory=inventoryrepository.findById(id).orElseThrow(()->new RuntimeException("Inventory not found"));
		inventory.setProducts(productClient.getProductsByInventoryId(inventory.getInventoryId()));
		return inventory;
	}

	@Override
	public Inventory createInventory(Inventory inventory) {
		return inventoryrepository.save(inventory);
	}

	@Override
	public Inventory updateInventory(Long id, Inventory inventory) {
		Inventory invt=inventoryrepository.findById(id).orElseThrow(()->new RuntimeException("Inventory not found"));
		invt.setCategory(inventory.getCategory());
		invt.setProducts(inventory.getProducts());
		invt.setLocation(inventory.getLocation());
		return inventoryrepository.save(invt);
	}
	
	@Override
	public void deleteInventory(Long id) {
		Inventory invt=inventoryrepository.findById(id).orElseThrow(()->new RuntimeException("Inventory not found"));
		inventoryrepository.delete(invt);
	}
	
	@Override
	public List<Inventory> getInventoriesByLocation(String location){
		
		List<Inventory> inventoriesList = inventoryrepository.findByLocationIgnoreCase(location);
		if(inventoriesList.isEmpty()) {
			throw new RuntimeException("No inventory found for the specific location.");
		}
		return inventoriesList;
	}

}
